#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_DIR="$SCRIPT_DIR"
CONFIG_FILE="$DOTFILES_DIR/config.yaml"
BACKUP_DIR="$HOME/.dotfiles-backup-$(date +%Y%m%d-%H%M%S)"

# Helper functions
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Parse YAML config (improved parser)
get_config() {
    local key="$1"
    if [ -f "$CONFIG_FILE" ]; then
        # Handle nested keys like modules.shell or settings.git.name
        if [[ "$key" == *.* ]]; then
            local section=$(echo "$key" | cut -d. -f1)
            local subkey=$(echo "$key" | cut -d. -f2-)
            awk -v section="$section" -v subkey="$subkey" '
                /^[a-zA-Z]/ { current_section = $1; gsub(/:/, "", current_section) }
                current_section == section && $0 ~ "^  " subkey ":" {
                    gsub(/^  /, ""); gsub(subkey ":", ""); gsub(/^ */, ""); gsub(/"/, ""); gsub(/#.*/, ""); gsub(/[ \t]*$/, ""); print; exit
                }
            ' "$CONFIG_FILE"
        else
            grep -E "^\s*${key}:" "$CONFIG_FILE" | sed 's/.*: *//' | sed 's/#.*//' | tr -d '"' | sed 's/[ \t]*$//' | head -1
        fi
    fi
}

is_module_enabled() {
    local module="$1"
    local enabled=$(get_config "modules.${module}")
    [ "$enabled" = "true" ]
}

# Backup existing files
backup_file() {
    local file="$1"
    if [ -f "$file" ] || [ -L "$file" ]; then
        mkdir -p "$BACKUP_DIR"
        cp -L "$file" "$BACKUP_DIR/$(basename "$file")" 2>/dev/null || true
        log_info "Backed up $file"
    fi
}

# Create symlink with backup
create_symlink() {
    local source="$1"
    local target="$2"
    
    if [ -f "$target" ] || [ -L "$target" ]; then
        backup_file "$target"
        rm -f "$target"
    fi
    
    ln -sf "$source" "$target"
    log_success "Linked $source -> $target"
}

# Install modules
install_shell_module() {
    log_info "Installing shell module..."
    create_symlink "$DOTFILES_DIR/modules/shell/bashrc" "$HOME/.bashrc"
    
    # Source additional shell configs
    if [ -f "$DOTFILES_DIR/modules/shell/bash_aliases" ]; then
        create_symlink "$DOTFILES_DIR/modules/shell/bash_aliases" "$HOME/.bash_aliases"
    fi
    
    log_success "Shell module installed"
}

install_git_module() {
    log_info "Installing git module..."
    
    # Check if gitconfig exists
    if [ ! -f "$DOTFILES_DIR/modules/git/gitconfig" ]; then
        log_warning "gitconfig not found, creating basic configuration..."
        create_git_config
    else
        create_symlink "$DOTFILES_DIR/modules/git/gitconfig" "$HOME/.gitconfig"
    fi
    
    # Install git hooks if enabled
    if [ "$(get_config 'settings.git.enforce_commit_tags')" = "true" ]; then
        if [ -f "$DOTFILES_DIR/modules/git/install-hooks.sh" ]; then
            bash "$DOTFILES_DIR/modules/git/install-hooks.sh"
        else
            log_warning "Git hooks script not found"
        fi
    fi
    
    log_success "Git module installed"
}

install_tools_module() {
    log_info "Installing tools module..."
    if [ -f "$DOTFILES_DIR/modules/tools/install.sh" ]; then
        bash "$DOTFILES_DIR/modules/tools/install.sh"
    else
        log_warning "Tools install script not found"
    fi
    log_success "Tools module processed"
}

install_vscode_module() {
    log_info "Installing VS Code module..."
    if command_exists code; then
        if [ "$(get_config 'settings.vscode.auto_install_extensions')" = "true" ]; then
            if [ -f "$DOTFILES_DIR/modules/vscode/install.sh" ]; then
                bash "$DOTFILES_DIR/modules/vscode/install.sh"
            else
                log_warning "VS Code install script not found"
            fi
        else
            log_info "VS Code extension auto-install disabled"
        fi
    else
        log_warning "VS Code not found, skipping extension installation"
    fi
    log_success "VS Code module processed"
}

install_python_module() {
    log_info "Installing Python module..."
    if [ -f "$DOTFILES_DIR/modules/python/install.sh" ]; then
        bash "$DOTFILES_DIR/modules/python/install.sh"
    else
        log_warning "Python install script not found"
    fi
    log_success "Python module processed"
}

install_docker_module() {
    log_info "Installing Docker module..."
    # Docker aliases are included in shell module
    log_success "Docker aliases configured in shell"
}

# Create basic git config if it doesn't exist
create_git_config() {
    local git_name=$(get_config "settings.git.name")
    local git_email=$(get_config "settings.git.email")
    local git_editor=$(get_config "settings.git.editor")
    
    if [ -z "$git_name" ]; then git_name="Your Name"; fi
    if [ -z "$git_email" ]; then git_email="your.email@example.com"; fi
    if [ -z "$git_editor" ]; then git_editor="nano"; fi
    
    cat > "$DOTFILES_DIR/modules/git/gitconfig" << EOF
[user]
    name = $git_name
    email = $git_email
[core]
    editor = $git_editor
    autocrlf = input
[init]
    defaultBranch = main
[pull]
    rebase = false
[push]
    default = simple
EOF
    
    create_symlink "$DOTFILES_DIR/modules/git/gitconfig" "$HOME/.gitconfig"
}

# Main installation
main() {
    log_info "Starting dotfiles installation..."
    log_info "Dotfiles directory: $DOTFILES_DIR"
    
    # Check if we're in the right directory
    if [ ! -f "$CONFIG_FILE" ]; then
        log_error "Config file not found at: $CONFIG_FILE"
        log_error "Make sure you're running this from the dotfiles directory."
        exit 1
    fi
    
    # Create modules directory if it doesn't exist
    mkdir -p "$DOTFILES_DIR/modules"
    
    # Install enabled modules
    local modules_installed=0
    
    if is_module_enabled "shell"; then 
        install_shell_module
        modules_installed=$((modules_installed + 1))
    fi
    
    if is_module_enabled "git"; then 
        install_git_module
        modules_installed=$((modules_installed + 1))
    fi
    
    if is_module_enabled "tools"; then 
        install_tools_module
        modules_installed=$((modules_installed + 1))
    fi
    
    if is_module_enabled "vscode"; then 
        install_vscode_module
        modules_installed=$((modules_installed + 1))
    fi
    
    if is_module_enabled "python"; then 
        install_python_module
        modules_installed=$((modules_installed + 1))
    fi
    
    if is_module_enabled "docker"; then 
        install_docker_module
        modules_installed=$((modules_installed + 1))
    fi
    
    if [ $modules_installed -eq 0 ]; then
        log_warning "No modules were enabled for installation"
        log_info "Edit $CONFIG_FILE to enable modules"
    else
        log_success "Dotfiles installation completed! ($modules_installed modules installed)"
        if [ -d "$BACKUP_DIR" ]; then
            log_info "Backup created at: $BACKUP_DIR"
        fi
        log_info "Please restart your shell or run: source ~/.bashrc"
    fi
}

# Handle command line arguments
case "${1:-}" in
    --help|-h)
        echo "Usage: $0 [options]"
        echo "Options:"
        echo "  --help, -h      Show this help message"
        echo "  --config, -c    Edit configuration file"
        echo "  --uninstall, -u Run uninstall script"
        exit 0
        ;;
    --config|-c)
        ${EDITOR:-nano} "$CONFIG_FILE"
        exit 0
        ;;
    --uninstall|-u)
        if [ -f "$SCRIPT_DIR/uninstall" ]; then
            exec "$SCRIPT_DIR/uninstall" "${@:2}"
        else
            log_error "Uninstall script not found at: $SCRIPT_DIR/uninstall"
            exit 1
        fi
        ;;
    *)
        main "$@"
        ;;
esac